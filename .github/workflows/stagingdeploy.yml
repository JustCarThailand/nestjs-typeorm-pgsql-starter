name: fcr staging deployments
on:
  push:
    branches:
      - staging

jobs:
  build-testing:
    name: pnpm install and build project
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Use NodeJS ${{ matrix.node-version }} for build testing
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          run_install: true

      - name: Build Project
        run: pnpm build

  docker-build:
    name: docker build job and push to aws ecr
    runs-on: ubuntu-latest
    needs: build-testing
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: 982860581031.dkr.ecr.ap-southeast-1.amazonaws.com/fcr-api
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  ssh-deployment:
    name: ssh to self-hosted server for deployments
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: ssh and deploy to docker server
        uses: appleboy/ssh-action@master
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: back-office-cs-api
          IMAGE_TAG: develop
        with:
          host: ${{secrets.HOST}}
          username: ${{secrets.USERNAME}}
          key: ${{secrets.AWS_RSA}}
          port: 22
          script_stop: true
          envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG
          script: |
            echo "start to access to fcr-api"
            cd fcr-api/

            echo "aws cli login"
            aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 982860581031.dkr.ecr.ap-southeast-1.amazonaws.com

            echo "pull image from aws ecr"
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            echo "down exist container"
            docker-compose down

            echo "start new string version of container"
            docker-compose up -d
